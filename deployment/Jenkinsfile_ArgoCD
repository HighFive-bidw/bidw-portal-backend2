// Jenkinsfile for Backend Services with ArgoCD

def PIPELINE_ID = "${env.BUILD_NUMBER}"

def getImageTag() {
    def dateFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    def currentDate = new Date()
    return dateFormat.format(currentDate)
}

podTemplate(
    label: "${PIPELINE_ID}",
    serviceAccount: 'jenkins',
    containers: [
        containerTemplate(name: 'podman', image: "mgoltzsche/podman", ttyEnabled: true, command: 'cat', privileged: true),
        containerTemplate(name: 'gradle', image: 'gradle:jdk21', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'azure-cli', image: 'hiondal/azure-kubectl:latest', command: 'cat', ttyEnabled: true),
        containerTemplate(name: 'git', image: 'alpine/git', command: 'cat', ttyEnabled: true)
    ],
    volumes: [
        emptyDirVolume(mountPath: '/home/gradle/.gradle', memory: false),
        emptyDirVolume(mountPath: '/root/.azure', memory: false)
    ]
) {
    node(PIPELINE_ID) {
        def props
        def imageTag = getImageTag()
        def namespace
        def services = ['auth', 'report', 'subscription']
        
        def jarFileMap = [
            'auth': 'auth-service.jar',
            'report': 'report-service.jar',
            'subscription': 'subscription-service.jar'
        ]

        stage("Get Source") {
            checkout scm
            props = readProperties file: "deployment/deploy_env_vars"
            namespace = "${props.namespace}"
        }

        stage('Build Applications') {
            container('gradle') {
                sh """
                    chmod +x gradlew
                    ./gradlew :auth:build :report:build :subscription:build -x test
                """
            }
        }

        stage('Build & Push Images') {
            container('podman') {
                withCredentials([usernamePassword(
                    credentialsId: 'acr-credentials',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD'
                )]) {
                    sh "podman login ${props.registry} --username \$USERNAME --password \$PASSWORD"

                    services.each { service ->
                        def jarFileName = jarFileMap[service]
                        
                        sh """
                            WORKSPACE=\$(pwd)
                            BUILD_DIR="\${WORKSPACE}/${service}/build/libs"
                            
                            podman build \\
                                --build-arg BUILD_LIB_DIR="${service}/build/libs" \\
                                --build-arg ARTIFACTORY_FILE="${jarFileName}" \\
                                -f deployment/container/Dockerfile \\
                                -t ${props.registry}/${props.image_org}/${service}:${imageTag} .

                            podman push ${props.registry}/${props.image_org}/${service}:${imageTag}
                        """
                    }
                }
            }
        }

        stage('Update Manifests') {
            container('git') {
                withCredentials([gitUsernamePassword(credentialsId: 'github-credentials')]) {
                    sh """
                        git clone https://github.com/HighFive-bidw/bidw-manifest.git
                        cd bidw-manifest
                    """

                    services.each { service ->
                        def deploymentFile = "manifest_backend/deployments/${service}-deployment.yaml"
                        
                        sh """
                            cd bidw-manifest
                            sed -i 's|image: .*|image: ${props.registry}/${props.image_org}/${service}:${imageTag}|g' ${deploymentFile}
                            
                            git config --global user.email "jenkins@example.com"
                            git config --global user.name "Jenkins"
                            
                            git add ${deploymentFile}
                            git commit -m "Update ${service} deployment image to ${imageTag}"
                            git push origin main
                        """
                    }
                }
            }
        }
    }
}

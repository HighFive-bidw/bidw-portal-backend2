// Jenkinsfile - Backend
def PIPELINE_ID = "${env.BUILD_NUMBER}"

def getImageTag() {
    def dateFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    def currentDate = new Date()
    return dateFormat.format(currentDate)
}

podTemplate(
    label: "${PIPELINE_ID}",
    serviceAccount: 'jenkins',
    containers: [
        containerTemplate(name: 'podman', image: "mgoltzsche/podman", ttyEnabled: true, command: 'cat', privileged: true),
        containerTemplate(name: 'gradle', image: 'gradle:jdk21', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'azure-cli', image: 'hiondal/azure-kubectl:latest', command: 'cat', ttyEnabled: true),
        containerTemplate(name: 'git', image: 'alpine/git', command: 'cat', ttyEnabled: true)
    ],
    volumes: [
        emptyDirVolume(mountPath: '/home/gradle/.gradle', memory: false),
        emptyDirVolume(mountPath: '/root/.azure', memory: false),
        emptyDirVolume(mountPath: '/run/podman', memory: false)
    ]
) {
    node(PIPELINE_ID) {
        def props
        def imageTag = getImageTag()
        def namespace
        def services = ['auth', 'report', 'subscription']

        // 서비스별 JAR 파일 이름 매핑
        def jarFileMap = [
            'auth': 'auth-service.jar',
            'report': 'report-service.jar',
            'subscription': 'subscription-service.jar'
        ]

        stage("Get Source") {
            checkout scm
            props = readProperties file: "deployment/deploy_env_vars"
            namespace = "${props.namespace}"
        }

        stage('Build Applications') {
            container('gradle') {
                sh """
                    chmod +x gradlew
                    # 테스트 없이 빌드 실행
                    ./gradlew :auth:build :report:build :subscription:build -x test
                """
            }
        }

        stage('Build & Push Images') {
            container('podman') {
                withCredentials([usernamePassword(
                    credentialsId: 'acr-credentials',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD'
                )]) {
                    sh "podman login ${props.registry} --username \$USERNAME --password \$PASSWORD"

                    services.each { service ->
                        def jarFileName = jarFileMap[service]

                        sh """
                            # 현재 워크스페이스의 절대 경로 가져오기
                            WORKSPACE=\$(pwd)
                            echo "Current workspace: \${WORKSPACE}"

                            # JAR 파일 존재 여부 확인
                            BUILD_DIR="\${WORKSPACE}/${service}/build/libs"
                            echo "Looking for JAR in: \${BUILD_DIR}"
                            ls -la \${BUILD_DIR}/ || echo "Directory not found or empty"

                            # 빌드 및 푸시
                            echo "Building image for ${service} using JAR: ${jarFileName}"
                            podman build \\
                                --build-arg BUILD_LIB_DIR="${service}/build/libs" \\
                                --build-arg ARTIFACTORY_FILE="${jarFileName}" \\
                                -f deployment/container/Dockerfile \\
                                -t ${props.registry}/${props.image_org}/${service}:${imageTag} .

                            podman push ${props.registry}/${props.image_org}/${service}:${imageTag}
                        """
                    }
                }
            }
        }

        stage('Update Manifest and Push') {
            container('git') {
                withCredentials([usernamePassword(credentialsId: 'github-credentials', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    sh """
                        # Git 설정
                        git config --global user.email "jenkins@example.com"
                        git config --global user.name "Jenkins CI"

                        # 매니페스트 저장소 클론
                        git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/HighFive-bidw/bidw-manifest.git
                        cd bidw-manifest

                        # 각 서비스에 대한 이미지 업데이트
                        for service in ${services.join(' ')}; do
                            echo "Updating image for \$service"
                            # sed를 사용하여 이미지 태그 업데이트
                            sed -i "s|image: ${props.registry}/${props.image_org}/\$service:.*|image: ${props.registry}/${props.image_org}/\$service:${imageTag}|g" manifest_backend/deployments/\$service-deployment.yaml

                            # 변경 내용 확인
                            cat manifest_backend/deployments/\$service-deployment.yaml | grep image:
                        done

                        # Git에 변경 사항 커밋 및 푸시
                        git add manifest_backend/deployments/*.yaml
                        git commit -m "Update backend image tags to ${imageTag}"
                        git push
                    """
                }
            }
        }
    }
}